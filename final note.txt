1. 二进制
二进制 转 k进制
k进制 转 二进制
8进制 和 16进制表示
<<  >>
3 >> 2 
5 << 2  10100

2. 原码补码和反码
c++ 都是使用反码的形式
        正数      负数
原码    000101        100101                  
反码                  111010
补码                  111011
-9 在c++中二进制如何表示
001001
110110
110111
001000
001001
-9 -> 9

3.编码
bit比特    计算机最小的存储单位
byte字节 = 8 bits
int -> 4字节
short -> 2字节
float -> 4字节  8
double -> 8字节 15
int 的最大值 2^31-1 = 2147483647(可以记一记 21开头 47结尾 很长的数字 大概率代表的就是整形的最大值)
      最小值 -2^31 (注意这里没有-1 所以是-2147483648)
A-Z 65 - 90
a-z 97 - 122
0-9 48 - 57

逻辑 
或| 与& 异或^ (这是c++语言里符号)
        不同为1 相同为0
∧与 ∨或 （这是数学符号表达式） 这里你会发现异或是小一点的和这里的^ 不一样
3|5  4&6  2^7

011 011   010
101 110   111
111 010   101

3||5

条件 && || 
0=false=0.0
其他数字 = true

4.排序
冒泡必须要会！！！ 自己回去好好过一遍
其他 插入 选择 归并 快速 希尔最好也要知道原理

5. 二分搜索法的三种格式你可以选择现在背，也可以靠现场推，但是重点就是 
1. 左值右值的选取（右值可以取得到也可能取不到
2. mid的计算
3. 返回值
到时候题目可能也会变化 所以考死背也不一定有用 要知道推理的逻辑
看到二分搜索的题目大概率 时间复杂度是 log N


6.树 和 图 （树是一种图）非线性数据结构
前序 后序 中序 层次遍历(bfs) 深度优先
如何通过
        1. 前序中序 -> 后序
        2. 后序中序 -> 前序
根
节点
父子
二叉树和普通树
节点的度：结点拥有的子树个数
完全二叉树
除了最后一层其他层全满
最后一层是从左往右
满二叉树 所有层全满

图：
有无方向
度
入度 进入这个节点有几条直接的路径
出度 出这个节点
联通
完全图
环

7. 其他线性数据结构
数组 链表 栈 队列 

8. 排列组合
步骤
1.先把复杂的问题简单化
2.是否可以把这个问题分成几步 第一步做哪些组合 第二步做哪些组合 
5副手套  6个手套 里面正好凑成2副手套
1. 4个手套凑成2副从5副手套里 有多少种（AB CDE）
2. 2只手套不能配成从6只手套  有多少种
当第一步中的组合不影响第二步的排列组合时
或者第一步的每个排列都可以和第二步的每个排列 组合时 应该用乘法（大多数时候都应该是乘法）
3.每一步总是不考虑重复的情况 再考虑重复的情况
4.有些组合枚举更加有效 要学会使用枚举的方法 并且尽量 有规律的进行排列

阅读题小技巧
1. 凡是看见数组 一维二维 画图！
2. 学会尝试 不同的 输入 1 2 3 若是数组画图题 尤其是动态规划类型 要学会理解哪个输入是最容易计算的
dp[4][4] = dp[3][5] + dp[2][6] + dp[1][7]
有时候题目给的输入就是最好的输入 直接用题目的输入套进去算一算 或者根据题目输入的特点 e.g. 记得有一道题问 输入 9801 1 是否会得到 99 有没有可能 n^2 1 就输出 n
同样的有时候题目会帮你找规律 e.g. f函数和g函数的意义是一样的
3. 回溯类型的题目 通常都是 for 循环内接 操作1，2，3... 递归下一层 反向操作3，2，1
int dp(a0,b0,lvl=0):
  # 基础条件
  for ...{
     操作1
     操作2 
     dp(a1,b1,lvl+1)
     反向操作2
     反向操作1
  }
4. 当你看到left right mid 大概率和二分搜索有关系 target if()
5. 当你看到 a % b 取余符号时 有一定概率是 要求因数是哪些或者因数个数
6. encode decode 或者带字符的题目通常是编码解码题
a[26]
b[26]
7. 当问到输出会不会受影响 看看哪几行会改变最后输出的
8. 当问到会不会报错 大概率下标可能超出数组范围，除以0等等
9. 看见条件 要学会总结 而不是 死推
   例如 if n % x == 0: # x是n的因数
           x...
   for i=0..k
        min_val = min(min_val, dp[i]) # 求dp[0..k]的最小值
10. 大概率每道题里的每个变量 或数组变量的含义都是固定的 所以你尝试各种输入的时候也要顺带去思考这些变量的含义
int n； #n指当前数字在k进制下有多少数位 10进制变k进制

k=2 # 进制
num=8  n=4
11. 做题目千万不要想当然 不要凭感觉 有很多题目都是陷阱 要自己学会归纳反例
12. 16-18 所有的题目都可以通过输入推找规律的 有的时候只是需要的时间久 需要细心 多利用草稿纸画表格 而不是空想 平均做完一套卷子 五张草稿纸正反面是至少的
13. 选择题学会做排除法 自信一点 明显不对的去掉 在剩下的当中猜也能提高对的概率 尤其是19 20题 2019-2023年有些填空很明显是错的

时间规划
选择题要控制在30分钟内
考试的时候根据难度 5道大题可以选做3道题 简单可以选做4题 （19，16大概率也会比较简单 然后可以花2-3分钟看一下 17 18 20 根据代码长度和感觉自行判断一下难度
但是务必每道题一旦选定要能够尝试足够的输入数据 直到找到规律 把代码看懂 有些代码可能根本没有任何含义但是一定会有一定规律

未选定的~2道题目 前三题或者判断题看看能不能通过看局部代码推测出答案来
记得所有没做的也要选个答案有一定概率得分
