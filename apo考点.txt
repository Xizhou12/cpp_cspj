1.原码 反码 补码
int x = 3;  4 字节  000000000000000011 原码
int y = -3;        100000000000000011 原码
int z = 3;         000000000000000011 反码
int p = -3;        111111111111111100 反码
int t = 1;         0001 补码
int m = -2;        1110 补码 = 反码 + 1 0010-> 1101+1 = 1110
/*
 1 1 1 1 (0001 -> 1110 + 1 -> 1111)
 1. 把每个比特颠倒
 2. 比特相加

  -6
  原10110
  反11001
  补11010
*/

2. 数据结构 链表 树 图 (要和数据类型区分开 int double char)
数据结构是数据连接的方式
图 graph 
所有的树都可以被认为是图
特点：
  vertex（node）顶点 节点
  edge 边 （A,B) (B,A) 
  directed graph 有方向的图 
    (A,B)指 A->B 
    (B,A) 指 B->A
  undirected 无方向的图 （A,B) (B,A) 无区别
应用:
微信 不仅需要存储用户的信息 还需要存储用户之间是否是好友
飞机场 航班 上海 <-> 北京 互相有航班 但是 上海 -> 墨西哥可能只有单向航班 城市可以看成顶点 航班看出边
一个有7个顶点的完全图 至少去掉多少条边以后可以成为一棵树

例题:
7个顶点的完全图 至少去掉多少边可以组成一个树
6+5+4+3+2+1 = 21
7 个节点的树 6 条边 21 - 6 = 15

算法的时间复杂度
1 + 2 + 3 + 4 + 5 + .. 1000 1000次
(1+n)*n/2 计算1次 下面这种方法更优
常数可以省略不看，只看量级更大的( O(1) < O(log(n)) < O(n*log(n)) < O(n^2)),要计算最差的可能性

for (int i = 0; i < n; i++){
  hello(); O(n*log(n))
  add(); O(1)
  print(); O(n^2)
  minus(); O(1)
  abc(); O(n)
} // O(n^3)

O(n)
int x[] = {1,2,3,7,8,10,12,103,1234,..,9999,..,23456547} //1000个数字
你要找到这里是否含有10321
一个个比较 每次只能排除一个
O(n) 时间复杂度 1000 T(n) = n 最差的情况是找到最后一个才发现是,甚至跟本没找到 都需要 1000次

二分法先找 中间的索引
x[500] > 10321 -> x[250] 
x[500] < 10321 -> x[750] 
x[500] = 10321  表示找到了
比较后可以排除一半的可能性
O(log(n)) log(1000) = 10 T(n) = log(n) 这种方法最多只需要找10次

时间复杂度衡量算法的计算速度
空间复杂度衡量算法使用了多少内存
例题:
T 是某个算法输入不同长度n后计算某个结果需要的计算时间 T和n的关系如下
T(1) = 1 （n=1)
T(n) = T(n-1) + n 
     = T(n-2) + n-1 + n (把n-1 代人)
     = 1 + 2 + 3 + 4 + ...+ n-1 + n
O(n^2)

————————————————————————————————————————
T(1) = 1
T(n) = 2 * T(n/2) + 2*n


T(n) = 2 * T(n/2) + 2*n
     = 2 * ( 2 * T(n/4) +                  2*n/2) + 2*n
     = 2 * ( 2 * (2 * T(n/8) +  2*n/4)) +  2*n/2) + 2*n
     = 2*2^log(n)*n/n + ...  +  8*n/4   +  4*n/2 +  2*n/1       (注意2^log(n) = n)
     = 2n             + ...  +  2n      +  2n    +  2n          (一共有 1 2 4 8 .. n -> log(n)项)
     = 2*n*log(n)
-----------------------------------------
A
A. O(n)   B. nlog(n) 
C. n^2 D. n^2logn

